"""create subsidy table and fields

Revision ID: 82564d70969d
Revises: d6b8f2f8579d
Create Date: 2025-10-07 14:03:15.304271

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2.types

# revision identifiers, used by Alembic.
revision: str = '82564d70969d'
down_revision: Union[str, Sequence[str], None] = 'd6b8f2f8579d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subsidies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manufacturer', sa.String(), nullable=False),
    sa.Column('model_group', sa.String(), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('subsidy_national_10k_won', sa.Integer(), nullable=False),
    sa.Column('subsidy_local_10k_won', sa.Integer(), nullable=False),
    sa.Column('subsidy_total_10k_won', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('model_name')
    )
    op.create_index(op.f('ix_subsidies_id'), 'subsidies', ['id'], unique=False)
    op.create_index(op.f('ix_subsidies_manufacturer'), 'subsidies', ['manufacturer'], unique=False)
    op.create_index(op.f('ix_subsidies_model_group'), 'subsidies', ['model_group'], unique=False)
    op.add_column('api_logs', sa.Column('response_msg', sa.String(length=255), nullable=True))
    op.alter_column('api_logs', 'endpoint',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='요청 엔드포인트',
               existing_nullable=False)
    op.alter_column('api_logs', 'method',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='HTTP 메서드',
               existing_nullable=False)
    op.alter_column('api_logs', 'api_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='API 타입 (예: StationInfo, StatusUpdate)',
               existing_nullable=False)
    op.alter_column('api_logs', 'status_code',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='HTTP 응답 상태 코드',
               existing_nullable=False)
    op.alter_column('api_logs', 'response_code',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='외부 API 응답 코드',
               existing_nullable=True)
    op.alter_column('chargers', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='충전기 DB 내부 고유 ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('chargers', 'station_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='소속 충전소 DB ID',
               existing_nullable=False)
    op.alter_column('chargers', 'charger_code',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment="충전소 내 충전기 코드 (예: '1', '2')",
               existing_nullable=False)
    op.alter_column('chargers', 'charger_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='충전기 종류 (예: 급속, 완속)',
               existing_nullable=True)
    op.alter_column('chargers', 'connector_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='커넥터 타입 (예: DC차데모, AC3상)',
               existing_nullable=True)
    op.alter_column('chargers', 'output_kw',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='충전기 출력 (kW)',
               existing_nullable=True)
    op.alter_column('chargers', 'status_code',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='충전기 상태 코드 (0: 사용가능, 1: 충전중 등)',
               existing_nullable=True)
    op.alter_column('chargers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='레코드 생성 시각',
               existing_nullable=False)
    op.alter_column('chargers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='레코드 최종 수정 시각',
               existing_nullable=False)
    op.alter_column('stations', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='충전소 DB 내부 고유 ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('stations', 'station_code',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='공공데이터 API 충전소 고유 코드',
               existing_nullable=False)
    op.alter_column('stations', 'name',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='충전소 이름',
               existing_nullable=False)
    op.alter_column('stations', 'address',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='충전소 상세 주소 정보',
               existing_nullable=True)
    op.alter_column('stations', 'provider',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='충전소 운영사 정보',
               existing_nullable=True)
    op.alter_column('stations', 'location',
               existing_type=geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               comment=None,
               existing_comment='PostGIS 위도/경도 위치 (POINT)',
               existing_nullable=True)
    op.alter_column('stations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='레코드 생성 시각',
               existing_nullable=False)
    op.alter_column('stations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='레코드 최종 수정 시각',
               existing_nullable=False)
    op.execute("DROP INDEX IF EXISTS ix_stations_name;")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_stations_name'), 'stations', ['name'], unique=False)
    op.alter_column('stations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='레코드 최종 수정 시각',
               existing_nullable=False)
    op.alter_column('stations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='레코드 생성 시각',
               existing_nullable=False)
    op.alter_column('stations', 'location',
               existing_type=geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               comment='PostGIS 위도/경도 위치 (POINT)',
               existing_nullable=True)
    op.alter_column('stations', 'provider',
               existing_type=sa.VARCHAR(length=100),
               comment='충전소 운영사 정보',
               existing_nullable=True)
    op.alter_column('stations', 'address',
               existing_type=sa.TEXT(),
               comment='충전소 상세 주소 정보',
               existing_nullable=True)
    op.alter_column('stations', 'name',
               existing_type=sa.VARCHAR(length=200),
               comment='충전소 이름',
               existing_nullable=False)
    op.alter_column('stations', 'station_code',
               existing_type=sa.VARCHAR(length=50),
               comment='공공데이터 API 충전소 고유 코드',
               existing_nullable=False)
    op.alter_column('stations', 'id',
               existing_type=sa.INTEGER(),
               comment='충전소 DB 내부 고유 ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('chargers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='레코드 최종 수정 시각',
               existing_nullable=False)
    op.alter_column('chargers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='레코드 생성 시각',
               existing_nullable=False)
    op.alter_column('chargers', 'status_code',
               existing_type=sa.INTEGER(),
               comment='충전기 상태 코드 (0: 사용가능, 1: 충전중 등)',
               existing_nullable=True)
    op.alter_column('chargers', 'output_kw',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='충전기 출력 (kW)',
               existing_nullable=True)
    op.alter_column('chargers', 'connector_type',
               existing_type=sa.VARCHAR(length=50),
               comment='커넥터 타입 (예: DC차데모, AC3상)',
               existing_nullable=True)
    op.alter_column('chargers', 'charger_type',
               existing_type=sa.VARCHAR(length=50),
               comment='충전기 종류 (예: 급속, 완속)',
               existing_nullable=True)
    op.alter_column('chargers', 'charger_code',
               existing_type=sa.VARCHAR(length=50),
               comment="충전소 내 충전기 코드 (예: '1', '2')",
               existing_nullable=False)
    op.alter_column('chargers', 'station_id',
               existing_type=sa.INTEGER(),
               comment='소속 충전소 DB ID',
               existing_nullable=False)
    op.alter_column('chargers', 'id',
               existing_type=sa.INTEGER(),
               comment='충전기 DB 내부 고유 ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('api_logs', 'response_code',
               existing_type=sa.INTEGER(),
               comment='외부 API 응답 코드',
               existing_nullable=True)
    op.alter_column('api_logs', 'status_code',
               existing_type=sa.INTEGER(),
               comment='HTTP 응답 상태 코드',
               existing_nullable=False)
    op.alter_column('api_logs', 'api_type',
               existing_type=sa.VARCHAR(length=50),
               comment='API 타입 (예: StationInfo, StatusUpdate)',
               existing_nullable=False)
    op.alter_column('api_logs', 'method',
               existing_type=sa.VARCHAR(),
               comment='HTTP 메서드',
               existing_nullable=False)
    op.alter_column('api_logs', 'endpoint',
               existing_type=sa.VARCHAR(),
               comment='요청 엔드포인트',
               existing_nullable=False)
    op.drop_column('api_logs', 'response_msg')
    op.execute("DROP INDEX IF EXISTS ix_subsidies_model_group;")
    op.execute("DROP INDEX IF EXISTS ix_subsidies_manufacturer;")
    op.execute("DROP INDEX IF EXISTS ix_subsidies_id;")
    op.drop_table('subsidies')
    # ### end Alembic commands ###
