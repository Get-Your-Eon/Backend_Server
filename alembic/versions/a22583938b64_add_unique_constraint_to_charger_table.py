"""Add unique constraint to Charger table

Revision ID: a22583938b64
Revises: b7a145511e70
Create Date: 2025-10-06 16:11:45.591327

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a22583938b64'
down_revision: Union[str, Sequence[str], None] = 'b7a145511e70'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use IF EXISTS for index drops to be tolerant of naming differences or absent indexes
    op.execute("DROP INDEX IF EXISTS ix_charger_charger_id;")
    op.execute("DROP INDEX IF EXISTS ix_charger_station_id;")
    op.execute("DROP TABLE IF EXISTS charger CASCADE;")
    op.execute("DROP INDEX IF EXISTS ix_station_station_code;")
    op.execute("DROP INDEX IF EXISTS ix_station_station_id;")
    op.execute("DROP TABLE IF EXISTS station CASCADE;")
    # op.execute("DROP TABLE IF EXISTS spatial_ref_sys;")
    op.execute("DROP INDEX IF EXISTS ix_api_log_log_id;")
    op.execute("DROP TABLE IF EXISTS api_log CASCADE;")
    # Avoid altering/creating tables that might already exist on certain DB
    # states. Skip these schema creation/alters to make migration idempotent.
    op.execute("SELECT 1; -- skip potential duplicate creation/alter")
    op.alter_column('api_logs', 'endpoint',
               existing_type=sa.VARCHAR(),
               nullable=False,
               comment='요청 엔드포인트',
               existing_comment='요청된 API 엔드포인트')
    op.alter_column('api_logs', 'method',
               existing_type=sa.VARCHAR(),
               nullable=False,
               comment='HTTP 메서드',
               existing_comment='HTTP 메소드')
    op.alter_column('api_logs', 'api_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='API 타입 (예: StationInfo, StatusUpdate)',
               existing_comment='API 종류 (station, charger, status 등)')
    op.alter_column('api_logs', 'status_code',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='HTTP 응답 상태 코드',
               existing_comment='응답 상태 코드')
    op.alter_column('api_logs', 'response_code',
               existing_type=sa.INTEGER(),
               comment='외부 API 응답 코드',
               existing_comment='API 응답 코드 기록 (HTTP 상태 등)',
               existing_nullable=True)
    op.drop_column('api_logs', 'request_time')
    op.drop_column('api_logs', 'response_time_ms')
    op.drop_column('api_logs', 'response_msg')
    op.alter_column('chargers', 'charger_code',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment="충전소 내 충전기 코드 (예: '1', '2')",
               existing_comment='충전기 고유 코드')
    op.alter_column('chargers', 'charger_type',
               existing_type=sa.VARCHAR(length=50),
               comment='충전기 종류 (예: 급속, 완속)',
               existing_comment='충전기 종류 (예: DC콤보, AC완속)',
               existing_nullable=True)
    op.alter_column('chargers', 'connector_type',
               existing_type=sa.VARCHAR(length=50),
               comment='커넥터 타입 (예: DC차데모, AC3상)',
               existing_comment='커넥터 타입 정보',
               existing_nullable=True)
    op.alter_column('chargers', 'output_kw',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               comment='충전기 출력 (kW)',
               existing_comment='충전기 출력 용량 (kW)',
               existing_nullable=True)
    op.alter_column('chargers', 'status_code',
               existing_type=sa.INTEGER(),
               comment='충전기 상태 코드 (0: 사용가능, 1: 충전중 등)',
               existing_comment='현재 상태 코드',
               existing_nullable=True)
    # drop constraint if exists to avoid errors on fresh DBs
    op.execute("ALTER TABLE chargers DROP CONSTRAINT IF EXISTS uq_station_charger_code;")
    op.create_unique_constraint('_station_charger_uc', 'chargers', ['station_id', 'charger_code'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # drop unique constraint if it exists to be tolerant on fresh DBs
    op.execute("ALTER TABLE chargers DROP CONSTRAINT IF EXISTS _station_charger_uc;")
    op.create_unique_constraint(op.f('uq_station_charger_code'), 'chargers', ['station_id', 'charger_code'], postgresql_nulls_not_distinct=False)
    op.alter_column('chargers', 'status_code',
               existing_type=sa.INTEGER(),
               comment='현재 상태 코드',
               existing_comment='충전기 상태 코드 (0: 사용가능, 1: 충전중 등)',
               existing_nullable=True)
    op.alter_column('chargers', 'output_kw',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               comment='충전기 출력 용량 (kW)',
               existing_comment='충전기 출력 (kW)',
               existing_nullable=True)
    op.alter_column('chargers', 'connector_type',
               existing_type=sa.VARCHAR(length=50),
               comment='커넥터 타입 정보',
               existing_comment='커넥터 타입 (예: DC차데모, AC3상)',
               existing_nullable=True)
    op.alter_column('chargers', 'charger_type',
               existing_type=sa.VARCHAR(length=50),
               comment='충전기 종류 (예: DC콤보, AC완속)',
               existing_comment='충전기 종류 (예: 급속, 완속)',
               existing_nullable=True)
    op.alter_column('chargers', 'charger_code',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment='충전기 고유 코드',
               existing_comment="충전소 내 충전기 코드 (예: '1', '2')")
    op.add_column('api_logs', sa.Column('response_msg', sa.TEXT(), autoincrement=False, nullable=True, comment='API 응답 메시지 기록'))
    op.add_column('api_logs', sa.Column('response_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='응답 처리 시간 (밀리초)'))
    op.add_column('api_logs', sa.Column('request_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='요청 수신 시각'))
    op.alter_column('api_logs', 'response_code',
               existing_type=sa.INTEGER(),
               comment='API 응답 코드 기록 (HTTP 상태 등)',
               existing_comment='외부 API 응답 코드',
               existing_nullable=True)
    op.alter_column('api_logs', 'status_code',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='응답 상태 코드',
               existing_comment='HTTP 응답 상태 코드')
    op.alter_column('api_logs', 'api_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment='API 종류 (station, charger, status 등)',
               existing_comment='API 타입 (예: StationInfo, StatusUpdate)')
    op.alter_column('api_logs', 'method',
               existing_type=sa.VARCHAR(),
               nullable=True,
               comment='HTTP 메소드',
               existing_comment='HTTP 메서드')
    op.alter_column('api_logs', 'endpoint',
               existing_type=sa.VARCHAR(),
               nullable=True,
               comment='요청된 API 엔드포인트',
               existing_comment='요청 엔드포인트')
    op.alter_column('api_logs', 'id',
               existing_type=sa.INTEGER(),
               comment='API 호출 로그 고유 ID',
               existing_nullable=False,
               autoincrement=True)
    op.create_table('api_log',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('api_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('request_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('response_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_msg', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('log_id', name=op.f('api_log_pkey'))
    )
    op.create_index(op.f('ix_api_log_log_id'), 'api_log', ['log_id'], unique=False)
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    )
    op.create_table('station',
    sa.Column('station_id', sa.INTEGER(), server_default=sa.text("nextval('station_station_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('station_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('station_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('station_id', name='station_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_station_station_id'), 'station', ['station_id'], unique=False)
    op.create_index(op.f('ix_station_station_code'), 'station', ['station_code'], unique=True)
    op.create_table('charger',
    sa.Column('charger_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('charger_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('charger_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('output_kw', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('connector_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['station_id'], ['station.station_id'], name=op.f('charger_station_id_fkey')),
    sa.PrimaryKeyConstraint('charger_id', name=op.f('charger_pkey'))
    )
    op.create_index(op.f('ix_charger_station_id'), 'charger', ['station_id'], unique=False)
    op.create_index(op.f('ix_charger_charger_id'), 'charger', ['charger_id'], unique=False)
    # ### end Alembic commands ###
