"""Add user table with role column

Revision ID: daa5cac943ac
Revises: 82564d70969d
Create Date: 2025-10-10 00:17:51.973156

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from geoalchemy2 import types


# revision identifiers, used by Alembic.
revision: str = 'daa5cac943ac'
down_revision: Union[str, Sequence[str], None] = '82564d70969d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # api_logs table may be created in other migration paths; avoid duplicate
    # creation on fresh DBs by skipping here. If the table is missing, other
    # migrations will create it.
    op.execute("SELECT 1; -- skip api_logs creation to avoid duplicates")
    # stations table is created earlier in migration history on some branches;
    # skip creation here to avoid DuplicateTableError on fresh DBs.
    op.execute("SELECT 1; -- skip stations creation")
    # subsidies table is handled by other migrations; skip to avoid dup
    op.execute("SELECT 1; -- skip subsidies creation")
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # chargers table may also be created elsewhere; skip to avoid duplication
    op.execute("SELECT 1; -- skip chargers creation")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP INDEX IF EXISTS ix_chargers_station_id;")
    op.execute("DROP INDEX IF EXISTS ix_chargers_id;")
    op.drop_table('chargers')
    op.execute("DROP INDEX IF EXISTS ix_users_username;")
    op.execute("DROP INDEX IF EXISTS ix_users_role;")
    op.execute("DROP INDEX IF EXISTS ix_users_id;")
    op.drop_table('users')
    op.execute("DROP INDEX IF EXISTS ix_subsidies_model_group;")
    op.execute("DROP INDEX IF EXISTS ix_subsidies_manufacturer;")
    op.execute("DROP INDEX IF EXISTS ix_subsidies_id;")
    op.drop_table('subsidies')
    op.execute("DROP INDEX IF EXISTS ix_stations_station_code;")
    op.execute("DROP INDEX IF EXISTS ix_stations_location;")
    op.execute("DROP INDEX IF EXISTS ix_stations_id;")
    op.execute("DROP INDEX IF EXISTS idx_stations_location;")
    op.drop_table('stations')
    op.execute("DROP INDEX IF EXISTS ix_api_logs_id;")
    op.drop_table('api_logs')
    # ### end Alembic commands ###
